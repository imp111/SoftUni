1. Working with console, users, and groups 

Executable Artifacts: 
- Shell Built-in Commands 
	External Commands 
	- Scripts 
	- Binary files 
- Special Types 
	- Aliases 
	- Functions 

Commands Execution (Shell's Perspective): 
Let's say we execute the command ls. 

This is what happens: 
Shell -> fork() [shell copy -> exec(ls) -> ls] -> shell 

When we execute ls, the bash is forked (child bash is created, and the command is executed). After that, we are returned to the parent shell. 

When something is executed (scripts): 
Sourcing and execution – are valid methods to execute scripts 

Sourcing does not create a subshell (doesn't fork), any changes made by the sourcing are then saved to the parent. 
How to execute sourcing: 
	- . source.sh 
	- source script.sh 

Execution creates subshell (except for system commands), once the execution of the command is finished, also the shell is closed (the fork). 
How to execute execution: 
exec ./script.sh 

Absolute and Relative Paths: 
Absolute path – always starts with the / 
Relative path – never start with / 

When you work with variables: 
If you want to work with the variable's value – we use $ 
If you want to work with the variable itself (as an object) – no $ 






6. Bash Scripting and Automation
cron - task scheduler in Linux
	- crond - daemon
	- crontab - management tool
Config files
	- Tasks - /etc/crontab and /etc/cron.d/*
	- Rights - /etc/cron.allow and /etc/cron.deny
Per user jobs
	- /var/spool/cron/*

.---------------- minute (0 - 59)
|  .------------- hour (0 - 23)
|  |  .---------- day of month (1 - 31)
|  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
|  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
|  |  |  |  |
*  *  *  *  * user-name  command to be executed(full path)

Examples:
0 0,12 * * * /utilities/backup.sh - runs at 00:00 and 12:00 every day
0 */2 * * * /utilities/backup.sh - runs every 2 hours every day
0 9-17 * * * /utilities/backup.sh - runs hourly between 9 and 17 o'clock every day

Shortcuts:
@yearly or @anually - run once a year at midnight of 1st of January (0 0 1 1 *)
@monthly - run once a month at midnight of the first day (0 0 1 * *)
@weekly - run once a week at midnight on Sunday morning (0 0 * * 0)
@daily or @midnight - run once a day at midnight (0 0 * * *)
@hourly - run once an hour at the beginning of the hour (0 * * * *)

anacron - runs commands periodically with frequency in days. It also does not assume that the machine is non-stop powered. This means that for each job anacron checks if it has been executed in the last N days, where N is the interval specified for the job.

Jobs are stored in:
	- etc/anacrontab
Configuration can be tested with:
	- anacron -T

at - run a task once at a specific time. Each task is queued at /val/spool/at
Security is defined through /etc/at.allow and etc/at.deny
Tools:
	- at - main utility
	- batch - auxiliary utility can be used as at to schedule commands (
	- atq - show jobs at at's queue
	- atrm - delete jobs
Shortcuts - today, midnight, noon, teatime, date, now + time unit (now + 3 hours)

systemd timer - systemd unit files (.timer) that control services (.service)
Read from the same paths as the other units. Offer built-in support for calendar and monotonic events.
Calendar (real-time) timers work the same way as cron jobs. Monotonic timers activate after a time span relative to a point.
Can be created as transient (temporary/on the fly) units as well.


