1. Working in the Console. Getting help. Working with Files and Folders. Users and Groups. Access Rights:
	A) Environment. Environmental: Definitions and Tools
		- Sets the operational conditions. 
		- Driven by variables ($USER, $SHELL, $PATH, etc.)
		- Can be set up on both system level and per user
		- Can be modified by both users and processes
		- Can be inherited

		Environmental Special Variables:
			General Purpose
				- $? - return the exit code of the last executed command
				- $! - return the PID of the last job run in the background
				- $$ - return the PID of the current process 
				- $_ - return the final argument of the previous command
			Prompt Related
				- $PS1 - regular prompt
				- $PS2 - prompt during multi-line commands

		Prompt Macros:
			- \h - hostname until the first '.'
			- \H - full hostname
			- \t - current time in 24-hour format HH:MM:SS
			- \A - current time in 24-hour format HH:SS
			- \u - username of the current user
			- \w - current working directory
			- \W - the base name of the current working directory
			- \# - command number of this command
			- \$ - If UID=0 then it is '#', otherwise it is '$'

	B) Command Execution. Executable Artifacts. Order of executions
		Executable Artifacts: 
			- Shell Built-in Commands 
			- External Commands 
				- Scripts 
				- Binary files 
			- Special Types 
				- Aliases 
				- Functions 

		Commands Execution (Shell's Perspective): 
			Let's say we execute the command ls. This is what happens (Command execution): 
				
				shell -> fork() -> shell
						-> shell copy -> exec(ls) -> ls

				Shell copy inherits shell and runs the ls in the background.
				When we execute ls, the bash is forked (child bash is created, and the command is executed). After that, we are returned to the parent shell. 

			When something is executed (scripts): 
				Sourcing and execution – are valid methods to execute scripts 

			- Sourcing does not create a subshell (doesn't fork), any changes made by the sourcing are then saved to the parent. 
			How to execute Sourcing: 
				- . source.sh 
				- source script.sh 

			- Execution creates a subshell (except for system commands), once the execution of the command is finished, also the shell is closed (the fork). 

				Execution check order process: Alias -> Function -> Built-in -> Hash -> PATH
					- builtin command - force built-in usage
					- /bin/test - set explicit path
					- command test - ignore aliases and functions
					- \test - ignore aliases
			
				How to execute execution: 
					exec ./script.sh 

		Absolute vs Relative Path:
			- Absolute - always starts from the / directory
			- Relative - starts from the current dir (does not start from /)

		When you work with variables: 
			- If you want to work with the variable's value – we use $ 
			- If you want to work with the variable itself (as an object) – no $ 

		Different between sudo - user and sudo user:
			- sudo - user - we specify that this will be a login session, we will go through the whole initialization process, we are also going to be redirected to the user home dir
			- sudo user - 

		Configuration Files:
			- System Level (for everyone) - /etc/ 
				- /etc/profile (used for env control and startup programs execution)
				- /etc/bashrc (used for functions and aliases definition)
				- /etc/profile.d/* (it is read by profile and bashrc, it is also recommended to not directly edit the profile and bashrc files, but to make changes in the profile.d folder as both of the files read from that folder)
			- User Level (for each user) - stored in the user's home folder
				- ~/.profile - executed only in login shell, reads from ~/.bashrc
				- ~/.bashrc - executed always
	
		Login Shell Sequence:
			- Interactive Login Shell -> /etc/profile, ~/.bash_profile -> ~/.bashrc -> /etc/bashrc -> /etc/profile.d/* -> ~/.bash_logout (when logging out)
			- Non-Interactive Login Shell -> Parent Environment, ~/.bashrc -> /etc/bashrc -> /etc/profile.d/*

		Multiple Files:
			- creating ({X,Y,Y},{A..D},{1..10})
			- *, ?, [], {}

		Files Types:
			- - regular 
			- d directory
			- l symbolic link
			- b - block device
			- c - character device
			- p - named pipe
			- s - socket

		Soft vs Hard Links:
			- Hard Link (ln - by default it creates a hard link) - hard links create a link to a file. That link points to the object (the inode). This means that if we edit the link, it will also edit the inode and the object itself. Changing the link or the file that the link points to, will change the content of both the file and link since they both point to the same inode. If we delete the hard link, all files that represent this inode will also be deleted.
			- Soft Link (ln -s - creates soft link) - the soft link is usually a very small size. The soft link creates a different object, with a different inode but this inode is just a redirection to the file that it points to. We can delete the link and it won't affect the original object, also if we delete the original object, the link will also be destroyed.

		Users:
        		Users file (/etc/passwd)
                		- username
                		- password placeholder
                		- user ID
                		- group ID
                		- comment (usually Full name)
                		- Home dir
                		- User shell
       			Users password (/etc/shadow)
                		- username
                		- encrypted password
                		- last password change
                		- minimum days between changes
                		- max days validity
                		- warn before expire (days)
                		- inactivity days after the password expires (number of days after the password expires, and will still be accepted).
                		- account expiration date
			Users Default During Creation
                		Default Values
                        		- /etc/login.defs
                        		- /etc/default/useradd
				Default home directory files and folders (when creating a new user, the files and directories that are in the /skel folder are copied to the home dir of the new user
					- taken (copied) from /etc/skel/

		Groups:
			Groups file (/etc/group)
				- Group name
				- Password placeholder
				- Group ID
				- Group members
			Groups Password file (/etc/gshadow)
				- Group name
				- Encrypted password
				- Group administrators
				- Group members
	
			
		Security:
			DAC (Discretionary Access Control) - level 1
				- Regular file access permissions
				- Access Control Lists (ACL)
			MAC (Mandatory Access Control) - level 2
				- SELinux
		
		Access Rights:
			r (4) - read
				- Files - allows to view the content of a file
				- Dir - allows to view the content of a dir
			w (2) - write
				- Files - allows to modify and delete a file
				- Dir - allows to delete the dir, modify the content of the dir (create, rename, delete files in the dir), modify the content of the files that the user can read
			x (1) - execute
				- Files - allows to execute the file (read permission is also needed)
				- Dir - allows to access the dir and access the metadata about files in the dir

			Symbol notation - rwxrw-r--
			Octal notation - 764

			Default access rights
				- Files - 666 - 002 = 664 [Maximum rights - Subtract umask = Result ]
				- Directories - 777 - 002 = 775 [Maximum rights - Subtract umask = Result ]

			Special Permissions
				Sticky Bit (prevents non-owners of a file to delete it, usually used on dirs) - 1xxx
					- chmod 1755 /dir #octal notation
					- chmod o+t /dir #symbol notation
		
				Set Group ID (SGID) (allows users to run a program, as if the user is part of the group, usually used for shared dirs. Let's say users A and B are part of group C, and there is a dir D, which is owned by group C, users A and B will be able to edit the contents of the folder) - 2xxx
					- chmod 2644 script.sh
					- chmod g+s script.sh

				Set User ID (SUID) (allows users to run a program as if it were its owner, we execute the file as we are the owner of it, in the name of the owner, usually the owner is root) - 4xxx
					- chmod 4644 scripts.sh
					- chmod u+s script.sh 




2. Working with files and flows

Input/Output Streams:
	- stdin (0)
	- stdout (1)
	- stderr (2)

Stream redirection:
	> - stdout redirect (overwrite)
		- &> - stdout and stderr redirect (overwrite) 
		- 1> - stdout redirect 
		- 2> - stderr redirect
		- 2>&1 - redirects stderr, where the stdout is redirected
	>> - stdout or stderr redirect (append)
	< - stdin redirect
	<< - heredoc append (cat > file.txt << end)


4. System and processes management and monitoring

BIOS (Basic Input/Output System)
	 - Operates in 16-bit mode
	 - Only text user interface
	 - Slow boot
	 - Supports only MBR
	 - Stored in CMOS RAM chip

Power on -> 
BIOS (Power On Self Test - checks the hardware, and self-testing the system components) -> 
MBR (its size is 512 bytes, MBR is also called Stage 1 Bootloader, you can find it in the boot order menu in BIOS, its main purpose is to take the boot process from BIOS to the actual boot loader) -> 
Boot loader (Stage 2 boot loader, which is located in some partition on the drive, stage 2 boot loader is a lot more complicated because it is not constrained by the 512 bytes size) -> 
Boot Manager (the screen where we get to choose the OS we want to run, and which Kernel we want to choose) -> 
Kernel (also contains this file Initrd - contains additional libraries, drivers, and other files that are necessary for and only for the booting, after that are not used) ->Init process (unloads INITRD, initializes the system) -> 
User programs -> 
OS

UEFI (Unified Extensible Firmware Interface)
	- Operates in 32 and 64-bit mode
	- Supports GUI
	- Fast boot
	- Settings stored on ESP (EFI System Partition) partition on one of the drives
	- Supports MBR and GPT

Power on -> UEFI (Power on self-test) -> EFI Boot Loader (EFI System Partition) -> OS

Boot loaders
On BIOS-based machines
	- GRUB2 (GNU Grand Unified Boot Loader) - grub2-mkconfig (to update the resulting files)
		Configuration files - files we can change
			- /etc/default/grub
			- /etc/grub.d/*
			- /etc/grub2.cfg
		Resulting files - we should not modify them, when we do it is usually by command
			- /boot/grub2/grub.cfg
			- /boot/grub2/grubenv
	- Syslinux - used for installation, live, or rescue media (this is the usual boot loader in the linux installation media)
	- LOadlin (Load Linux) - used for booting from non-Linux OS

ON UEFI based machines (usually the result files path is different)
	- GRUB2 - grub2-mkconfig
		Configuration files
			- /etc/default/grub
			- /etc/grub.d/*
			- /etc/grub2-efi.cfg
		Resulting files
			- /boot/efi/EFI/centos/grub.cfg
			- /boot/efi/EFI/centos/grubenv
			- /boot/grub2/grubenv
	
Initialization Methods
	- SysVinit (System 5 init or Sys5) - sequential, unilizes runlevels
	- Upstart - event driven (when some event happes, other one is activated)
	- OpenRC - dependency based initialization system (dependency based - something will be turned on after the all the neccesery steps are completed before that, Apache will be turned on after we have network connection, etc.)
	- systemd - dependency based initialization system with aggresive parallelization
		- systemd 
		- systemctl 
		- systemd-analyze - unility for performance statistics inspection
		- journald - loggin component by default. Binary files. Replaceable
		- consoled - user console daemon
		- networkd
		- logind

	dmesg - print or control kernel ring buffer
		-H 
		-H -l warn -f kern

	efibootmgr - manipulate the EFI boot manager
		-v
		-o

Systemd
	Units (init scripts) - unit is a file that represents system component configuration
		- Naming convention - "unit name"."unit type"
		- Locations
			- Installed by the distribution - /usr/lib/systemd/system/*
			- Runtime - /run/systemd/system/* (units that are used during the OS is working)
			- Custom - /etc/systemd/system/*
		- Types
			- Service - .target - describes how to manage a service or application
			- Targer - .target - provides synchronization points for other units when booting or changing states
			- Timer - .timer - timer managed by systemd. A matching unit will be started when the timer

	Service Units
		- /usr/lib/systemd/system/ssh.service
	
	Target Unit
		- /usr/lib/systemd/system/rescue.target

	Unit Dependencies
		- Wants - Wants=unit2, when unit1 runs, unit2 will run as well
		- Requires - Requires=unit2, both units will run simultaneously, if unit2 fails unit1 will be deactivated
		- Dependant

Processes and Jobs
	Process - running program with its own address space
	Job - interactive program that doesn't detach (can be in the same session or in the background)
		- jobs - display status of jobs
		- fg - move job to the foreground (in the same session) 
		- bg - move job to background 
		- ps
		- pstree - display a tre of processes
		- pgrep
		- top - display linux processes
		- htop - extention to top

	Signals (Inter-process communication - IPC) - asynchronous notification sent to a process
		- SIGHUP - 1 - hang up or shutdown and restart process
		- SIGINT - 2 - interrupt a process (ctrl + c)
		- SIGKILL - 9 - kill the process (cannot be ignored or caught)
		- SIGTERM - 15 - terminate a process (can be ignored or caught)
		- SIGTSTP - 20 - stop the terminal (ctrl + z)
		
		- kill - send a signal to a process
		- killall - kill processes by name
		- pkill - 

	___________________________________________________
	| 0 (High) ----	Priority (PR) level ---- 39 (Low) |
	|						  |
	| -20 (Low) ---	Niceness level -------- 19 (High) |
	___________________________________________________

	The nicer a certain process is, the lower his priority is (the less resources are given to him) and vice versa.

	- renice - alter priority
	- watch - executing a program periodically, showing output full-screen
	- nohup - run command immune to SIGHUP with output to a file
	- screen - screen manager with terminal emulation
	- tmux

Monitoring

	- free - display amount of free and used memory in the system
	- df - report file system disk space usage
	- du - estimate disk space usage (used for folders)
	- vmstat - virtual memory
	- iostat - report cpu and io statistics
	- pidstat
	- sar - display linux processes
	- nmon
	- iotop -
	- lsof - list open files


6. Bash Scripting and Automation
cron - task scheduler in Linux
	- crond - daemon
	- crontab - management tool
Config files
	- Tasks - /etc/crontab and /etc/cron.d/*
	- Rights - /etc/cron.allow and /etc/cron.deny
Per user jobs
	- /var/spool/cron/*

.---------------- minute (0 - 59)
|  .------------- hour (0 - 23)
|  |  .---------- day of month (1 - 31)
|  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
|  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
|  |  |  |  |
*  *  *  *  * user-name  command to be executed(full path)

Examples:
0 0,12 * * * /utilities/backup.sh - runs at 00:00 and 12:00 every day
0 */2 * * * /utilities/backup.sh - runs every 2 hours every day
0 9-17 * * * /utilities/backup.sh - runs hourly between 9 and 17 o'clock every day

Shortcuts:
@yearly or @anually - run once a year at midnight of 1st of January (0 0 1 1 *)
@monthly - run once a month at midnight of the first day (0 0 1 * *)
@weekly - run once a week at midnight on Sunday morning (0 0 * * 0)
@daily or @midnight - run once a day at midnight (0 0 * * *)
@hourly - run once an hour at the beginning of the hour (0 * * * *)

anacron - runs commands periodically with frequency in days. It also does not assume that the machine is non-stop powered. This means that for each job anacron checks if it has been executed in the last N days, where N is the interval specified for the job.

Jobs are stored in:
	- etc/anacrontab
Configuration can be tested with:
	- anacron -T

at - run a task once at a specific time. Each task is queued at /val/spool/at
Security is defined through /etc/at.allow and etc/at.deny
Tools:
	- at - main utility
	- batch - auxiliary utility can be used as at to schedule commands (
	- atq - show jobs at at's queue
	- atrm - delete jobs
Shortcuts - today, midnight, noon, teatime, date, now + time unit (now + 3 hours)

systemd timer - systemd unit files (.timer) that control services (.service)
Read from the same paths as the other units. Offer built-in support for calendar and monotonic events.
Calendar (real-time) timers work the same way as cron jobs. Monotonic timers activate after a time span relative to a point.
Can be created as transient (temporary/on the fly) units as well.


6. Bash Scripting and Automation

  systemctl status serviceName       - check if specific service status
  systemctl enable --now serviceName - enable a service, now
  systemctl start serviceName        - start a service service

  Scheduling with "at":
  at 18:48                           - schedule a job at a exact time in the future (3 minutes after the current time)
  at now + 3 minutes                 - schedule a job using relative time (again 3 minutes after the current time)
  atq                                - checks the queue of the scheduled jobs
  atrm idOfJob                       - remove a job using the ID

  Scheduling with crond/cron (depending on the distribution):
  crontab -e                         - edit the crontab
  crontab -l                         - list all the crontab schedules
  
  /var/spool/cron/                   - contains all the cron jobs

Cpanel and WHM:

/usr/local/cpanel/ - this is where cPanel and WHM software lives
/usr/local/cpanel/3rdparty/ - 3rd party subfolder for software that cpanel uses but did not develop (example: /perl, /mailman)
/usr/local/cpanel/base - the files that are loaded when accessing the cpanel/whm control panelurl.com/2087, /2083
/usr/local/cpanel/bin - binary files (executables) used via interface oprations or automated tasks
/usr/local/cpanel/Whostmgr, Cpanel - back-end Perl modules, mirroring the module names with the path. (.pm - perl module)
/usr/local/cpanel/logs/ - any logged data generated specifically by cPanel/WHM itself, such as with interface actions/errors, transfers, cPHulk, licensing, and tailwatchd, among others. (most important files: error_log, access_log).

/usr/bin/cpanel - important dir 1
/var/cpanel - important dir 2

restartsrv script - used to restart, start, stop services
	[actions]
	- stop
	- reload
	- status
	- restart
	- default option is restart

/scripts/restartsrv_exim --stop
/scripts/restartsrv [any cPanel service] --action 

when any of the above is executed, it will attempt to run it three times and if it fails it will report that it could not complete that action.

Restart Script Logic (/scripts/restartsrv):

if (service is known (service provided by cPanel))
	the respective service restart script is run. 
	/scripts/restartsrv exim -> /scripts/restartsrv_exim is executed with the provided arguments
else
	/scripts/restartsrv_unknown with any provided arguments is executed


Check Services Daemon (chkservd):
	chkservd monitors all services in /etc/chksrv.d/chksrvd.conf (cron, apache, IMAP, SSH, etc.)

Service Manager (in WHM) is the GUI for chkservd.

To create a new service, create a file in /etc/chkserv.d/service_name but the service will not appear in chkservd.conf until it is enabled in WHM.

TailWatch (tailwatchd) - monitors logs for certain activities (Tweak Settings)
