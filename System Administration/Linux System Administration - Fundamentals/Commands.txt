whois domainName 
dig A domainName
dig mx domainName
ping ip
host
wp core download --skip-content --force --version=6.5.5 - wordpress core files download
/scripts/suspendacct [accountUsername] --force - suspend cpanel account from terminal
/scirpts/unsuspendacct [accountUsername] --force - unsuspend cpanel account from terminal

--------------------------------------------------------------------------------------------------------------------------------

AWK:
awk '{print}' file.txt

$0 - entire line
$1 - first column
$1,$2 - first and second columnt
NR - number of the line
NF - number of columns per line
$NF - display last column per line
NR==3 - from third line
" " - print any string

---------------------------------------------------------------------------------------------------------------------------------
set (+o) - check local vars and  
unset - del a var
env - environmental variables
hash (-p, -l) - remembers or display program locations
whereis (-b) - locates binary, source and man page files for a cmd
which (-a) - shows full path of (shell) commands
type (-a) - display info about command type
alias (-p) - display or define aliases
unalias (-a) - remove alias
export - sets a variable as a environmental one
whereis - 
history - command history
file
stat - gives info about a file
touch (-a)
cp
mv
rm
mkdir
rmdir
ln (-s)
w - see who is logged in
sha256sum binaryFile - gives hash sum of a file
diff (-y)


Executables:
	- Shell Built-in 
	- External (Binary Files, Scripts)
	- Special Types (Functions, Aliases)

Command execution:
	shell -> fork() -> shell
			-> shell copy -> exec(ls) -> ls

	Shell copy inherits shell and runs the ls in the background.

Sourcing vs Execution:
	
	- Sourcing - no subshell, any vars set become part of the env. (. script.sh || source script.sh)
	- Execution - subshell is created (except for the built-in shell commands)
		Execution check order proccess: Alias -> Function -> Built-in -> Hash -> PATH
			- builtin command - force built-in usage
			- /bin/test - set explicit path
			- command test - ignore aliases and functions
			- \test - ignore aliases


Prompt Macros:
\h
\H

Special env vars:
$?
$!
$$
$_

Absolute vs Relative Path:
	- Absolute - always starts from the / directory
	- Relative - starts from the current dir (does not start from /)

Configuration Files:
	- System Level (for everyone) - /etc/ 
		- /etc/profile (used for env control and startup programs execution)
		- /etc/bashrc (used for functions and aliases definition)
		- /etc/profile.d/* (it is read by profile and bashrc, it is also recommended to not directly edit the profile and bashrc files, but to make changes in the profile.d folder as they both of the files read from that folder)
	- User Level (for each user) - stored in the user's home folder
		- ~/.profile - executed only in login shell, reads from ~/.bashrc
		- ~/.bashrc - executed always
	
	Login Shell Sequence:
	
	- Interactive Login Shell -> /etc/profile, ~/.bash_profile -> ~/.bashrc -> /etc/bashrc -> /etc/profile.d/* -> ~/.bash_logout (when logging out)

	- Non-Interactive Login Shell -> Parent Environment, ~/.bashrc -> /etc/bashrc -> /etc/profile.d/*

Multiple Files:
- creating ({X,Y,Y},{A..D},{1..10})
- *, ?, [], {}

Files Types:
- regular 
d directory
l symbolic link
b - block device
c - charecter device
p - named pipe
s - socket

Soft vs Hard Links:
	- ln (creates hard link) - hard links creates a link to a file. That link points to the object (the inode). This means that if we edit the link, it will also edit the inode and the object itself. So changing the link or the file that the link points to, will change the content of both the file and link, since they both point to the same inode. If we delete the hard link, it will also delete all files that represent this inode.
	- ln -s (creates soft link) - the soft link has usually very small size. The soft link creates a different object, with different inode but this inode is just a redirection to the file that it points to. We can delete the link and it won't affect the original object, also if we delete the original object, the link will also be destroyed.


6. Bash Scripting and Automation

  systemctl status serviceName       - check if specific service status
  systemctl enable --now serviceName - enable a service, now
  systemctl start serviceName        - start a service service

  Scheduling with "at":
  at 18:48                           - schedule a job at a exact time in the future (3 minutes after the current time)
  at now + 3 minutes                 - schedule a job using relative time (again 3 minutes after the current time)
  atq                                - checks the queue of the scheduled jobs
  atrm idOfJob                       - remove a job using the ID

  Scheduling with crond/cron (depending on the distribution):
  crontab -e                         - edit the crontab
  crontab -l                         - list all the crontab schedules
  
  /var/spool/cron/                   - contains all the cron jobs

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

/usr/local/cpanel/ - this is where cPanel and WHM software lives
/usr/local/cpanel/3rdparty/ - 3rd party subfolder for software that cpanel uses but did not develop (example: /perl, /mailman)
/usr/local/cpanel/base - the files that are loaded when accessing the cpanel/whm control panelurl.com/2087, /2083
/usr/local/cpanel/bin - binary files (executables) used via interface oprations or automated tasks
/usr/local/cpanel/Whostmgr, Cpanel - back-end Perl modules, mirroring the module names with the path. (.pm - perl module)
/usr/local/cpanel/logs/ - any logged data generated specifically by cPanel/WHM itself, such as with interface actions/errors, transfers, cPHulk, licensing, and tailwatchd, among others. (most important files: error_log, access_log).

/usr/bin/cpanel - important dir 1
/var/cpanel - important dir 2

restartsrv script - used to restart, start, stop services
	[actions]
	- stop
	- reload
	- status
	- restart
	- default option is restart

/scripts/restartsrv_exim --stop
/scripts/restartsrv [any cPanel service] --action 

when any of the above is executed, it will attempt to run it three times and if it fails it will report that it could not complete that action.

Restart Script Logic (/scripts/restartsrv):

if (service is known (service provided by cPanel))
	the respective service restart script is run. 
	/scripts/restartsrv exim -> /scripts/restartsrv_exim is executed with the provided arguments
else
	/scripts/restartsrv_unknown with any provided arguments is executed


Check Services Daemon (chkservd):
	chkservd monitors all services in /etc/chksrv.d/chksrvd.conf (cron, apache, IMAP, SSH, etc.)

Service Manager (in WHM) is the GUI for chkservd.

To create a new service, create a file in /etc/chkserv.d/service_name but the service will not appear in chkservd.conf until it is enabled in WHM.

TailWatch (tailwatchd) - monitors logs for certain activities (Tweak Settings)
