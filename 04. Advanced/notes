Lecture 1: Stacks and Queues:
Stacks (LIFO - Last In, First Out)
	- Stack<T>
		Stack<string> stack = new Stack<string>();

	- Stack Methods
		- Push()	- add element to the top of the stack
		- Pop()		- remove element from the top of the stack
		- Peek()	- return the top element without removing it
		- ToArray()	- save all the values of the stack to array
		- Contains()	- check if element exists in the stack
		- Count()	- return the count of elements in the stack

Queues (FIFO - First In, First Out)
	- Queue<T>
		Queue<string> queue = new Queue<string>();

	- Queue Methods
		- Enqueue()	- add element to the back of the queue
		- Dequeue()	- remove element from the front of the queue
		- Peek()	- return the first element of the queue without removing it
		- ToArray()	- save all the values of the queue to array
		- Contains()	- check if element exists in the queue
		- Count()	- return the count of element in the stack

Lecture 2: Multidimensional Array:
Multidimensional Arrays (1D, 2D, 3D, ..., nD) - array is a systematic arrangement of similar objects, multidimensional array have more than one dimension (2D are most used - matrix)
	type[] name - 1D array
	type[,] name - 2D array
	type[,,] name - 3D array

	int[,] matrix = new int[,];

	2D Array (Matrix):

	     0	 1   2			     Columns	
	   -------------	   ----------------------------
	0  | 1 | 2 | 3 |	R  | [0, 0] | [0, 1] | [0, 2] |
	1  | 4 | 5 | 6 |	O  | [1, 0] | [1, 1] | [1, 2] |
	2  | 7 | 8 | 9 |	W  | [2, 0] | [2, 1] | [2, 2] |
	   -------------	S  ----------------------------

Jagged Arrays (Array of Arrays) - multidimensional arrays, but each element has different size. Each of the arrays has different length
	type[][] name - jagged array

	int[][] jagged = new int[3][];
	jagged[0] = new int[3];
	jagged[1] = new int[2];
	jagged[2] = new int[4];

	- Accessing Element
		int num = jagged[0][1]; // assign to integer num, a element from the jagged array with row - 0 and col - 1


Lecture 3: Sets and Dictionaires:
Associative Arrays - array indexed by keys -> value pair (not with 0, 1, 2, ..., n)
	
	- Dictionary
		Dictionary<Key, Value> - keys are unique
		var fruits = new Dictionary<string, double>();
		fruits["bananna"] = 2.20;

	- SortedDictionary
		SortedDictionary<Key, Value> - keeps its keys sorted (uses a balanced search tree)
		var fuits = new SortedDictionary<string, double>();
		fruits["kiwi"] = 4.50;

	- Built in Methods for Dictionaries
		- Add(Key, Value)
		- Remove(Key, Value)
		- ContainsKey(key)
		- ContainsValue(value)

		var airplanes = new Dictionary<string, int>();
		airplanes.Add("Boeing 737", 130);	// add item to dictionary
		airplanes.Remove("Boeing 737");		// remove item from dictionary
		if (airplanes.ContainsKey("Boeing 737") || airplanes.ContainsValue(130))
		{
			Console.WriteLine("The plane exists");
		}
	
	- Multi-Dictionaries - dictionaries holding key and a list of values
		var grades = new Dictionary<string, List<int>>();
		grades["Peter"] = new List<int>() {6, 6, 5, 5, 4, 4};
		Console.WriteLine(string.Join(" ", grades["Peter"]));

	- Nested-Dictionaries - dictionary may hold another dictionary as value
		var country = new Dictionary<string, Dictionary<string, int>>();
	
	- Sets - keeps unique elements, fast performance, allows add/remove/search elements
		- HashSet<T> - keeps a set of elements in hash table, elements are in no order, similar to List<T> but difference implementation
		List<T> 					   vs 			HashSet<T> 
		Fast "add"								Fast "add"
		Slow "search"								Fast "search"
		Slow "remove" (searches through each element)				Fast "remove" (thanks to hash-table)
		Duplicates are allowed							Does not allows duplicates
		Insertion order is guaranteed						Does not guarantee the insertion order

		HashSet<string> set = new HashSet<string>();
		set.Add("Peter");
		set.Add("Gosho");
		set.Add("Peter"); // not allowed
		Console.WriteLine(string.Join(", ", set)); // we can use the usual methods - add, remove, contains(key), count

		- SortedSet<T> - elements are ordered incrementally (alphabetically)
			var sortedSet = new SortedSet<string>();
			sortedSet.Add("Peter");
			sortedSet.Add("Asha");
			Console.WriteLine(string.Join(" ", sortedSet)); // output: Asha, Peter

